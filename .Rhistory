if(!require('tidyverse')) install.packages('tidyverse')
?require
if (!require('rpart')) install.packages('rpart')
if (!require('tidyverse')) install.packages('tidyverse')
library(tidyverse)
library(rpart)
library(rpart.plot)
# Clear workspace
rm(list = ls())
# Setting seed for reproducability (cross-validation)
set.seed(74589)
# Read in master data
masterdata <- read.csv('master_data.csv')
# Initializing function
# Arguments:
# x: a vector (attribute) for which we wish to calculate coefficient of variation
coef.var <- function(x){
sd(x)/mean(x)
}
# Comparing coefficient of variation for standard vs log-transformed target attribute
coef.var(masterdata$Total.deaths)
coef.var(masterdata$Total.deaths.log)
# No more scientific notation!
options(scipen = 999)
# Data frame setup
xlog <- 1:10
ylog <- round(exp(c(1:10)), digits = 2)
log_df <- data.frame(xlog, ylog)
# Plotting the values
ggplot(log_df, aes(x = xlog, y = ylog)) +
geom_line(col = 'red',
alpha = 0.5) +
geom_point() +
geom_text(aes(label = ylog),
vjust = -0.7) +
labs(x = 'Logarithmic scale', y = 'Base') +
ylim(0, 25000) +
scale_x_continuous(breaks = seq(1, 10, 1),
minor_breaks = 0) +
theme_bw()
# Plotting the values
Figure5 <- ggplot(log_df, aes(x = xlog, y = ylog)) +
geom_line(col = 'red',
alpha = 0.5) +
geom_point() +
geom_text(aes(label = ylog),
vjust = -0.7) +
labs(x = 'Logarithmic scale', y = 'Base') +
ylim(0, 25000) +
scale_x_continuous(breaks = seq(1, 10, 1),
minor_breaks = 0) +
theme_bw()
?save.plot
?png
?ggsave
ggsave('Figure 5',
plot = Figure5,
path = 'Plots/')
# Plotting the values
Figure5 <- ggplot(log_df, aes(x = xlog, y = ylog)) +
geom_line(col = 'red',
alpha = 0.5) +
geom_point() +
geom_text(aes(label = ylog),
vjust = -0.7) +
labs(x = 'Logarithmic scale', y = 'Base') +
ylim(0, 25000) +
scale_x_continuous(breaks = seq(1, 10, 1),
minor_breaks = 0) +
theme_bw()
ggsave('Figure 5',
plot = Figure5,
path = 'Plots/')
ggsave('Figure_5.png',
plot = Figure5,
path = 'Plots/')
# Initializing a function to plot variable importance scores for a model
# Arguments:
# x: an rpart object
varimp.plot <- function(x){
varimp <- x$variable.importance
df <- data.frame(importance = round(varimp/sum(varimp), digits =2))
df1 <- df %>%
tibble::rownames_to_column() %>%
dplyr::rename('variable' = rowname) %>%
dplyr::arrange(importance) %>%
dplyr::mutate(variable = forcats::fct_inorder(variable))
df2 <- df1 %>%
dplyr::filter(importance > 0)
ggplot2::ggplot(df2, aes(x = variable, y = importance)) +
geom_col(col = 'black', show.legend = F) +
geom_text(aes(label = importance), hjust = -0.2) +
labs(x = 'Input attribute', y = 'Variable importance') +
ylim(0, max(df2$importance + 0.1)) +
coord_flip() +
scale_fill_grey() +
theme_bw()
}
m1 <- rpart(Total.deaths.log ~
Minority.econonmic.discrimination + Ethnic.exclusion + Religious.freedom + Gender.equality +
Population.size + Land.area + Mountainous.terrain +
Oil + Diamonds +
Prosperity + Economic.growth + Economic.inequality + Mass.education +
Peace.years + New.state + Neighbor.at.war +
Democracy + Anocracy + Political.instability,
data = masterdata,
method = 'anova',
control = rpart.control(xval = 10,
minbucket = nrow(masterdata)/20,
maxdepth = 6))
# Plotting the tree
Figure1a<- rpart.plot(m1, type = 4,
fallen.leaves = F,
tweak = 1.1,
clip.right.labs = F)
ggsave('Figure_1a.png',
plot = Figure1a,
path = 'Plots/')
m1 <- rpart(Total.deaths.log ~
Minority.econonmic.discrimination + Ethnic.exclusion + Religious.freedom + Gender.equality +
Population.size + Land.area + Mountainous.terrain +
Oil + Diamonds +
Prosperity + Economic.growth + Economic.inequality + Mass.education +
Peace.years + New.state + Neighbor.at.war +
Democracy + Anocracy + Political.instability,
data = masterdata,
method = 'anova',
control = rpart.control(xval = 10,
minbucket = nrow(masterdata)/20,
maxdepth = 6))
# Plotting the tree
png(filename = 'Plots/Figure_1a.png')
rpart.plot(m1, type = 4,
fallen.leaves = F,
tweak = 1.1,
clip.right.labs = F)
dev.off()
# Plotting the values
ggplot(log_df, aes(x = xlog, y = ylog)) +
geom_line(col = 'red',
alpha = 0.5) +
geom_point() +
geom_text(aes(label = ylog),
vjust = -0.7) +
labs(x = 'Logarithmic scale', y = 'Base') +
ylim(0, 25000) +
scale_x_continuous(breaks = seq(1, 10, 1),
minor_breaks = 0) +
theme_bw()
ggsave('Figure_5.png',
path = 'Plots/')
##################################################################################
#                                                                                #
# Roots of Conflict:                                                             #
# Classification and Regression Trees and                                        #
# the Complexity of Organized Violence                                           #
#                                                                                #
# Uppsala University                                                             #
# Jonah Simonds                                                                  #
# Master's Thesis                                                                #
# Spring 2021                                                                    #
#                                                                                #
# Scripts to generate CART models and related visualizations                     #
#                                                                                #
##################################################################################
### Initalization
library(tidyverse)
library(rpart)
library(rpart.plot)
# Clear workspace
rm(list = ls())
# Setting seed for reproducability (for cross-validation)
set.seed(74589)
# Read in master data
masterdata <- read.csv('master_data.csv')
### Tree specification
# Initializing a function to plot variable importance scores for a model
# Arguments:
# x: an rpart object
varimp.plot <- function(x){
varimp <- x$variable.importance
df <- data.frame(importance = round(varimp/sum(varimp), digits =2))
df1 <- df %>%
tibble::rownames_to_column() %>%
dplyr::rename('variable' = rowname) %>%
dplyr::arrange(importance) %>%
dplyr::mutate(variable = forcats::fct_inorder(variable))
df2 <- df1 %>%
dplyr::filter(importance > 0)
ggplot2::ggplot(df2, aes(x = variable, y = importance)) +
geom_col(col = 'black', show.legend = F) +
geom_text(aes(label = importance), hjust = -0.2) +
labs(x = 'Input attribute', y = 'Variable importance') +
ylim(0, max(df2$importance + 0.1)) +
coord_flip() +
scale_fill_grey() +
theme_bw()
}
# Model 1: Generalized CART for armed conflict deaths
m1 <- rpart(Total.deaths.log ~
Minority.econonmic.discrimination + Ethnic.exclusion + Religious.freedom + Gender.equality +
Population.size + Land.area + Mountainous.terrain +
Oil + Diamonds +
Prosperity + Economic.growth + Economic.inequality + Mass.education +
Peace.years + New.state + Neighbor.at.war +
Democracy + Anocracy + Political.instability,
data = masterdata,
method = 'anova',
control = rpart.control(xval = 10,
minbucket = nrow(masterdata)/20,
maxdepth = 6))
# Plotting the tree
png(filename = 'Plots/Figure_1a.png')
rpart.plot(m1, type = 4,
fallen.leaves = F,
tweak = 1.1,
clip.right.labs = F)
dev.off()
# Plotting the variable importance scores
varimp.plot(m1)
ggsave('Figure_1b.png',
path = 'Plots/')
# Model 2: Subsetting country-years where conflict isn't ongoing
# Subset data
peaceful <- masterdata %>%
filter(Peace.years > 0)
m2 <- rpart(Total.deaths.log ~
Minority.econonmic.discrimination + Ethnic.exclusion + Religious.freedom + Gender.equality +
Population.size + Land.area + Mountainous.terrain +
Oil + Diamonds +
Prosperity + Economic.growth + Economic.inequality + Mass.education +
Peace.years + New.state + Neighbor.at.war +
Democracy + Anocracy + Political.instability,
data = peaceful,
method = 'anova',
control = rpart.control(xval = 10,
minbucket = nrow(peaceful)/20,
maxdepth = 6))
# Plotting the tree
png(filename = 'Plots/Figure_2a.png')
rpart.plot(m2, type = 4,
fallen.leaves = F,
tweak = 1.1)
dev.off()
# Plotting the variable importance scores
varimp.plot(m2)
ggsave('Figure_2b.png',
path = 'Plots/')
# Model 3: Subsetting country-years where conflict is ongoing
# Subset data
ongoing <- masterdata %>%
filter(Peace.years == 0)
m3 <- rpart(Total.deaths.log ~
Minority.econonmic.discrimination + Ethnic.exclusion + Religious.freedom + Gender.equality +
Population.size + Land.area + Mountainous.terrain +
Oil + Diamonds +
Prosperity + Economic.growth + Economic.inequality + Mass.education +
New.state + Neighbor.at.war +
Democracy + Anocracy + Political.instability,
data = ongoing,
method = 'anova',
control = rpart.control(xval = 10,
minbucket = nrow(ongoing)/20,
maxdepth = 6))
# Plotting the tree
png(filename = 'Plots/Figure_3a.png')
rpart.plot(m3, type = 4,
fallen.leaves = F,
tweak = 1.1)
dev.off()
# Plotting the variable importance scores
varimp.plot(m3)
ggsave('Figure_3b.png',
path = 'Plots/')
### Model 4: Subsetting country-years where conflict onset is occurring
# First we create a reference for each country's final year in the data
lastyear <- masterdata %>%
group_by(countryname) %>%
slice_tail(1)
# Then we subset the data
onset <- masterdata %>%
# First by filtering only observations where peace.years is greater than 0
# and also the following observation has peace.year equal to 0
filter(Peace.years > 0 & dplyr::lead(masterdata$Peace.years == 0)) %>%
# Then we exclude those observations that are the final year in the data set
# for that country. This prevents us from comparing one country's peace year
# value in 2016 to the next country's peace year value in 1989.
filter(!(countryname %in% lastyear$countryname & year %in% lastyear$year))
# We wind up with a sample of only 103 observations. Terminal node sample sizes increased to 10%
m4 <- rpart(Total.deaths.log ~
Minority.econonmic.discrimination + Ethnic.exclusion + Religious.freedom + Gender.equality +
Population.size + Land.area + Mountainous.terrain +
Oil + Diamonds +
Prosperity + Economic.growth + Economic.inequality + Mass.education +
Peace.years + New.state + Neighbor.at.war +
Democracy + Anocracy + Political.instability,
data = onset,
method = 'anova',
control = rpart.control(minbucket = nrow(onset)/10,
xval = 10,
maxdepth = 6))
# Plotting the tree
png(filename = 'Plots/Figure_4a.png')
rpart.plot(m4, type = 4,
fallen.leaves = F,
tweak = 1)
dev.off()
# Plotting the variable importance scores
varimp.plot(m4)
ggsave('Figure_4b.png',
path = 'Plots/')
### Logarithmic scale conversion
# No more scientific notation!
options(scipen = 999)
# Data frame setup
xlog <- 1:10
ylog <- round(exp(c(1:10)), digits = 2)
log_df <- data.frame(xlog, ylog)
# Plotting the values
ggplot(log_df, aes(x = xlog, y = ylog)) +
geom_line(col = 'red',
alpha = 0.5) +
geom_point() +
geom_text(aes(label = ylog),
vjust = -0.7) +
labs(x = 'Logarithmic scale', y = 'Base') +
ylim(0, 25000) +
scale_x_continuous(breaks = seq(1, 10, 1),
minor_breaks = 0) +
theme_bw()
ggsave('Figure_5.png',
path = 'Plots/')
